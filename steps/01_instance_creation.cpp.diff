--- a/../../VulkanTutorial/code/01_instance_creation.cpp
+++ b/01_instance_creation.cpp
@@ -1,4 +1,4 @@
-#define GLFW_INCLUDE_VULKAN
+#include <vulkan/vulkan.hpp>
 #include <GLFW/glfw3.h>
 
 #include <iostream>
@@ -19,8 +19,7 @@ public:
 
 private:
     GLFWwindow* window;
-
-    VkInstance instance;
+    vk::UniqueInstance instance;
 
     void initWindow() {
         glfwInit();
@@ -42,7 +41,7 @@ private:
     }
 
     void cleanup() {
-        vkDestroyInstance(instance, nullptr);
+        // NOTE: instance destruction is handled by UniqueInstance
 
         glfwDestroyWindow(window);
 
@@ -50,31 +49,40 @@ private:
     }
 
     void createInstance() {
-        VkApplicationInfo appInfo = {};
-        appInfo.sType = VK_STRUCTURE_TYPE_APPLICATION_INFO;
-        appInfo.pApplicationName = "Hello Triangle";
-        appInfo.applicationVersion = VK_MAKE_VERSION(1, 0, 0);
-        appInfo.pEngineName = "No Engine";
-        appInfo.engineVersion = VK_MAKE_VERSION(1, 0, 0);
-        appInfo.apiVersion = VK_API_VERSION_1_0;
-
-        VkInstanceCreateInfo createInfo = {};
-        createInfo.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
-        createInfo.pApplicationInfo = &appInfo;
-
+        auto appInfo = vk::ApplicationInfo(
+            "Hello Triangle",
+            VK_MAKE_VERSION(1, 0, 0),
+            "No Engine",
+            VK_MAKE_VERSION(1, 0, 0),
+            VK_API_VERSION_1_0
+        );
+        
         uint32_t glfwExtensionCount = 0;
         const char** glfwExtensions;
-        glfwExtensions = glfwGetRequiredInstanceExtensions(&glfwExtensionCount);
 
-        createInfo.enabledExtensionCount = glfwExtensionCount;
-        createInfo.ppEnabledExtensionNames = glfwExtensions;
+        glfwExtensions = glfwGetRequiredInstanceExtensions(&glfwExtensionCount);
 
-        createInfo.enabledLayerCount = 0;
+        auto createInfo = vk::InstanceCreateInfo(
+            vk::InstanceCreateFlags(),
+            &appInfo,
+            0, nullptr, // enabled layers
+            glfwExtensionCount, glfwExtensions // enabled extensions
+        );
 
-        if (vkCreateInstance(&createInfo, nullptr, &instance) != VK_SUCCESS) {
+        try {
+            instance = vk::createInstanceUnique(createInfo, nullptr);
+        }
+        catch (vk::SystemError err) {
             throw std::runtime_error("failed to create instance!");
         }
+
+        std::cout << "available extensions:" << std::endl;
+
+        for (const auto& extension : vk::enumerateInstanceExtensionProperties()) {
+            std::cout << "\t" << extension.extensionName << std::endl;
+        }
     }
+
 };
 
 int main() {
