--- a/01_instance_creation.cpp
+++ b/02_validation_layers.cpp
@@ -3,11 +3,39 @@
 
 #include <iostream>
 #include <stdexcept>
+#include <vector>
+#include <cstring>
 #include <cstdlib>
 
 const int WIDTH = 800;
 const int HEIGHT = 600;
 
+const std::vector<const char*> validationLayers = {
+    "VK_LAYER_LUNARG_standard_validation"
+};
+
+#ifdef NDEBUG
+const bool enableValidationLayers = false;
+#else
+const bool enableValidationLayers = true;
+#endif
+
+VkResult CreateDebugUtilsMessengerEXT(VkInstance instance, const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugUtilsMessengerEXT* pCallback) {
+    auto func = (PFN_vkCreateDebugUtilsMessengerEXT) vkGetInstanceProcAddr(instance, "vkCreateDebugUtilsMessengerEXT");
+    if (func != nullptr) {
+        return func(instance, pCreateInfo, pAllocator, pCallback);
+    } else {
+        return VK_ERROR_EXTENSION_NOT_PRESENT;
+    }
+}
+
+void DestroyDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerEXT callback, const VkAllocationCallbacks* pAllocator) {
+    auto func = (PFN_vkDestroyDebugUtilsMessengerEXT) vkGetInstanceProcAddr(instance, "vkDestroyDebugUtilsMessengerEXT");
+    if (func != nullptr) {
+        func(instance, callback, pAllocator);
+    }
+}
+
 class HelloTriangleApplication {
 public:
     void run() {
@@ -21,6 +49,7 @@ private:
     GLFWwindow* window;
 
     vk::UniqueInstance instance;
+    VkDebugUtilsMessengerEXT callback;
 
     void initWindow() {
         glfwInit();
@@ -33,6 +62,7 @@ private:
 
     void initVulkan() {
         createInstance();
+        setupDebugCallback();
     }
 
     void mainLoop() {
@@ -42,6 +72,10 @@ private:
     }
 
     void cleanup() {
+        if (enableValidationLayers) {
+            DestroyDebugUtilsMessengerEXT(*instance, callback, nullptr);
+        }
+
         // NOTE: instance destruction is handled by UniqueInstance
 
         glfwDestroyWindow(window);
@@ -50,6 +84,10 @@ private:
     }
 
     void createInstance() {
+        if (enableValidationLayers && !checkValidationLayerSupport()) {
+            throw std::runtime_error("validation layers requested, but not available!");
+        }
+
         auto appInfo = vk::ApplicationInfo(
             "Hello Triangle",
             VK_MAKE_VERSION(1, 0, 0),
@@ -58,32 +96,88 @@ private:
             VK_API_VERSION_1_0
         );
         
-        uint32_t glfwExtensionCount = 0;
-        const char** glfwExtensions;
-
-        glfwExtensions = glfwGetRequiredInstanceExtensions(&glfwExtensionCount);
+        auto extensions = getRequiredExtensions();
 
         auto createInfo = vk::InstanceCreateInfo(
             vk::InstanceCreateFlags(),
             &appInfo,
             0, nullptr, // enabled layers
-            glfwExtensionCount, glfwExtensions // enabled extensions
+            static_cast<uint32_t>(extensions.size()), extensions.data() // enabled extensions
         );
 
+        if (enableValidationLayers) {
+            createInfo.enabledLayerCount = static_cast<uint32_t>(validationLayers.size());
+            createInfo.ppEnabledLayerNames = validationLayers.data();
+        }
+
         try {
             instance = vk::createInstanceUnique(createInfo, nullptr);
         }
         catch (vk::SystemError err) {
             throw std::runtime_error("failed to create instance!");
         }
+    }
 
-        std::cout << "available extensions:" << std::endl;
+    void setupDebugCallback() {
+        if (!enableValidationLayers) return;
 
-        for (const auto& extension : vk::enumerateInstanceExtensionProperties()) {
-            std::cout << "\t" << extension.extensionName << std::endl;
+        auto createInfo = vk::DebugUtilsMessengerCreateInfoEXT(
+            vk::DebugUtilsMessengerCreateFlagsEXT(),
+            vk::DebugUtilsMessageSeverityFlagBitsEXT::eVerbose | vk::DebugUtilsMessageSeverityFlagBitsEXT::eWarning | vk::DebugUtilsMessageSeverityFlagBitsEXT::eError,
+            vk::DebugUtilsMessageTypeFlagBitsEXT::eGeneral | vk::DebugUtilsMessageTypeFlagBitsEXT::eValidation | vk::DebugUtilsMessageTypeFlagBitsEXT::ePerformance,
+            debugCallback,
+            nullptr
+        );
+
+        // NOTE: Vulkan-hpp has methods for this, but they trigger linking errors...
+        //instance->createDebugUtilsMessengerEXT(createInfo);
+        //instance->createDebugUtilsMessengerEXTUnique(createInfo);
+
+        // NOTE: reinterpret_cast is also used by vulkan.hpp internally for all these structs
+        if (CreateDebugUtilsMessengerEXT(*instance, reinterpret_cast<const VkDebugUtilsMessengerCreateInfoEXT*>(&createInfo), nullptr, &callback) != VK_SUCCESS) {
+            throw std::runtime_error("failed to set up debug callback!");
+        }
+    }
+
+    std::vector<const char*> getRequiredExtensions() {
+        uint32_t glfwExtensionCount = 0;
+        const char** glfwExtensions;
+        glfwExtensions = glfwGetRequiredInstanceExtensions(&glfwExtensionCount);
+
+        std::vector<const char*> extensions(glfwExtensions, glfwExtensions + glfwExtensionCount);
+
+        if (enableValidationLayers) {
+            extensions.push_back(VK_EXT_DEBUG_UTILS_EXTENSION_NAME);
         }
+
+        return extensions;
     }
 
+    bool checkValidationLayerSupport() {
+        auto availableLayers = vk::enumerateInstanceLayerProperties();
+        for (const char* layerName : validationLayers) {
+            bool layerFound = false;
+
+            for (const auto& layerProperties : availableLayers) {
+                if (strcmp(layerName, layerProperties.layerName) == 0) {
+                    layerFound = true;
+                    break;
+                }
+            }
+
+            if (!layerFound) {
+                return false;
+            }
+        }
+
+        return true;
+    }
+
+    static VKAPI_ATTR VkBool32 VKAPI_CALL debugCallback(VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageType, const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData, void* pUserData) {
+        std::cerr << "validation layer: " << pCallbackData->pMessage << std::endl;
+
+        return VK_FALSE;
+    }
 };
 
 int main() {
